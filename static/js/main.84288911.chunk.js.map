{"version":3,"sources":["reducers.js","api/apiCall.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","apiCall","link","fetch","then","response","json","Card","id","name","email","className","src","alt","CardList","map","user","i","key","SearchBox","SearchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","this","setState","React","Component","CounterButton","count","nextProps","nextState","color","onClick","onContextMenu","e","preventDefault","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","App","connect","searchRobots","requestRobots","dispatch","payload","target","value","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reducers","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.84288911.chunk.js","sourcesContent":["import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD :\r\n            return {...state, searchField: action.payload}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots:action.payload, isPending: false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error:action.payload, isPending: false}\r\n        default:\r\n           return state;\r\n}\r\n}","const apiCall = (link) => fetch(link).then(response => response.json())\r\n\r\nexport default apiCall;","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ SearchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={SearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n        {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oops, something went wrong...</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            count: 0\r\n        };\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <button \r\n            id=\"counter\"\r\n            className=\"f6 grow no-underline br-pill ba bw1 ph3 pv2 mb2 dib dark-green\"\r\n            color={this.props.color}\r\n            onClick={() => this.setState({ count: this.state.count + 1 })}\r\n            onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                this.setState({ count: this.state.count - 1 })}} \r\n            >\r\n            Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CounterButton;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './MainPage.css'\r\nimport CounterButton from './CounterButton';\r\n\r\nclass MainPage extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filterRobots = robots => {\r\n    return robots.filter((robot) => {\r\n        return robot.name\r\n          .toLowerCase()\r\n          .includes(this.props.searchField.toLowerCase()) \r\n      });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {robots, onSearchChange, isPending} = this.props;\r\n\r\n    return isPending ? <h1 className=\"tc f1\">Loading...</h1>\r\n        : (\r\n        <div className=\"tc\">\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            <CounterButton color=\"white\"/>\r\n            <SearchBox SearchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={this.filterRobots(robots)} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchfield, requestRobots } from '../actions';\r\nimport './App.css'\r\nimport MainPage from '../components/MainPage';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n  \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (e) => dispatch(setSearchfield(e.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return <MainPage {...this.props} />\r\n    }\r\n    \r\n  }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import apiCall from './api/apiCall';\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nexport const setSearchfield = (txt) => ({type: CHANGE_SEARCH_FIELD, payload: txt})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING})\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n      .catch(e => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: e}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nconst reducers = combineReducers({searchRobots, requestRobots})\nconst logger = createLogger();\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>  \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}